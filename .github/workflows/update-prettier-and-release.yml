name: Update Prettier and Release

on:
  schedule:
    - cron: "17 7 * * *"   # daily at 07:17 UTC â€” change as you like
  workflow_dispatch: {}

concurrency:
  group: update-prettier
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  update-and-release:
    runs-on: ubuntu-latest
    env:
      GH_EMAIL: github-actions[bot]@users.noreply.github.com
      GH_NAME: github-actions[bot]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Determine current & latest Prettier versions
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f package.json ]; then
            echo "No package.json present; skipping."
            echo "current=" >> "$GITHUB_OUTPUT"
            echo "latest=" >> "$GITHUB_OUTPUT"
            echo "repo_version=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          CURRENT=$(jq -r '.devDependencies.prettier // .dependencies.prettier // ""' package.json)
          CURRENT="${CURRENT#^}"; CURRENT="${CURRENT#~}"
          LATEST=$(npm view prettier version --no-update-notifier --no-fund)
          REPO_VERSION=$(jq -r '.version // "1.0.0"' package.json)
          echo "current=$CURRENT" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
          echo "repo_version=$REPO_VERSION" >> "$GITHUB_OUTPUT"

      - name: Up to date notice
        if: ${{ steps.versions.outputs.current != '' && steps.versions.outputs.current == steps.versions.outputs.latest }}
        run: echo "Prettier is up to date (v${{ steps.versions.outputs.latest }})."

      - name: Decide dependency section (devDependencies vs dependencies)
        id: sect
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          if jq -e '.devDependencies.prettier' package.json >/dev/null; then
            echo "section=devDependencies" >> "$GITHUB_OUTPUT"
          else
            echo "section=dependencies" >> "$GITHUB_OUTPUT"
          fi

      - name: Calculate new version
        id: newver
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          set -euo pipefail
          REPO_VERSION="${{ steps.versions.outputs.repo_version }}"
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$REPO_VERSION"
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update package.json to latest Prettier
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.versions.outputs.latest }}"
          SEC="${{ steps.sect.outputs.section }}"
          NEW_VERSION="${{ steps.newver.outputs.new_version }}"
          tmp=package.json.tmp
          jq --arg v "$VER" --arg s "$SEC" --arg nv "$NEW_VERSION" '.[$s].prettier = $v | .version = $nv' package.json > "$tmp"
          mv "$tmp" package.json

      - name: Ensure TOML plugin stays installed (if you use it)
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          if ! jq -e '.devDependencies["prettier-plugin-toml"] // .dependencies["prettier-plugin-toml"]' package.json >/dev/null; then
            npm install --save-dev prettier-plugin-toml
          fi

      - name: Update .pre-commit-hooks.yaml with new Prettier version
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.versions.outputs.latest }}"
          # Update prettier version in .pre-commit-hooks.yaml
          sed -i "s/prettier@[0-9.]\+/prettier@$VER/" .pre-commit-hooks.yaml

      - name: Update README .prettierrc example to match repo's .prettierrc
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          set -euo pipefail
          # Use Python to update the README's .prettierrc example
          python3 << 'EOF'
          import re
          import json

          # Read README
          with open('README.md', 'r') as f:
              readme_content = f.read()

          # Read actual .prettierrc
          with open('.prettierrc', 'r') as f:
              prettierrc_data = json.load(f)

          # Format the prettierrc content with 2-space indent
          prettierrc_formatted = json.dumps(prettierrc_data, indent=2)

          # Pattern to match the code block in the Configuration section
          pattern = r'(Create a `\.prettierrc` file in your repository root to customize formatting options:\n\n```json\n).*?(\n```)'

          # Replace with the actual .prettierrc content
          replacement = r'\1' + prettierrc_formatted + r'\2'
          new_readme = re.sub(pattern, replacement, readme_content, flags=re.DOTALL)

          # Write back to README.md
          with open('README.md', 'w') as f:
              f.write(new_readme)
          EOF

      - name: Commit and tag changes
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        shell: bash
        run: |
          set -euo pipefail
          PRETTIER_VER="${{ steps.versions.outputs.latest }}"
          NEW_VERSION="${{ steps.newver.outputs.new_version }}"
          git config user.email "$GH_EMAIL"
          git config user.name "$GH_NAME"
          git add package.json .pre-commit-hooks.yaml README.md
          git commit -m "chore: update Prettier to v$PRETTIER_VER"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION with Prettier $PRETTIER_VER"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: ${{ steps.versions.outputs.latest != '' && steps.versions.outputs.current != steps.versions.outputs.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PRETTIER_VER="${{ steps.versions.outputs.latest }}"
          NEW_VERSION="${{ steps.newver.outputs.new_version }}"
          gh release create "v$NEW_VERSION" \
            --title "v$NEW_VERSION" \
            --notes "Updated Prettier to v$PRETTIER_VER"
