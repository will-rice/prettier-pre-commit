name: Bump Patch, Tag, and Release (on merge)

on:
  push:
    branches: [ main ]   # <-- change if your default branch isnâ€™t 'main'

permissions:
  contents: write

concurrency:
  group: bump-version
  cancel-in-progress: false

jobs:
  bump-tag-release:
    # prevent infinite loops when this workflow pushes the bump commit
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    env:
      GH_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
      GH_NAME: github-actions[bot]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure package.json exists
        run: test -f package.json || { echo "package.json not found"; exit 1; }

      - name: Compute next patch version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          CUR=$(jq -r '.version' package.json)
          CORE="${CUR%%-*}"; CORE="${CORE%%+*}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CORE:-0.0.0}"
          : "${MAJOR:=0}" "${MINOR:=0}" "${PATCH:=0}"
          NEXT="${MAJOR}.${MINOR}.$((PATCH+1))"
          echo "current=$CUR" >> "$GITHUB_OUTPUT"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"

      - name: Bump version in package.json
        shell: bash
        run: |
          set -euo pipefail
          NEXT='${{ steps.ver.outputs.next }}'
          tmp=package.json.tmp
          jq --arg v "$NEXT" '.version = $v' package.json > "$tmp"
          mv "$tmp" package.json

      - name: Commit and tag
        shell: bash
        run: |
          set -euo pipefail
          NEXT='${{ steps.ver.outputs.next }}'
          git config user.email "$GH_EMAIL"
          git config user.name "$GH_NAME"
          git add package.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: release v$NEXT"
          else
            echo "No changes to commit."
          fi
          if git rev-parse "v$NEXT" >/dev/null 2>&1; then
            echo "Tag v$NEXT already exists."
          else
            git tag -a "v$NEXT" -m "v$NEXT"
          fi
          git push origin HEAD --follow-tags

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          NEXT='${{ steps.ver.outputs.next }}'
          gh release view "v$NEXT" >/dev/null 2>&1 || \
            gh release create "v$NEXT" --title "v$NEXT" --notes "Automated patch release v$NEXT"
